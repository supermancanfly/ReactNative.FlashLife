import {
    AppleButton,
    appleAuth, AppleAuthError,
    AppleAuthRequestOperation,
    AppleAuthRequestScope,
    AppleAuthCredentialState,
} from '@invertase/react-native-apple-authentication';
import { SignInWithAppleButton } from 'react-native-apple-authentication'

import React from 'react';
import jwt_decode from 'jwt-decode';
import {
    SafeAreaView,
    StyleSheet,
    ScrollView,
    View,
    Text,
    StatusBar,
    TouchableOpacity,
    Image,
    Keyboard,
    // TextInput,
    BackHandler,
    ActivityIndicator,
    Alert,
    PixelRatio,
    PermissionsAndroid,
    Linking
} from 'react-native';
import { SvgXml } from 'react-native-svg';
import { firebaseUser } from './../Core/firebase';
import { firebase } from '@react-native-firebase/auth';
import { TextInput } from 'react-native-paper';
import { ConstantValues } from '../utils/ConstantValues';
import InternetStatusConnection from '../utils/InternetStatusConnection';
import AsyncStorage from '@react-native-community/async-storage';
import { colors, fontsProps, dimensionsProps, paddingProps } from '../utils/StyleComponents';
import Constantimages from '../utils/ConstantImages';
import ProgressDialog from '../components/dialogs/ProgressDialog';
import LocationSwitch from 'react-native-location-switch';
import { ValidateAlertPop } from '../utils/CommonMethods';
import { WebView } from 'react-native-webview';
import {
    ApiUserLogin,
    ApiGetUserDetails,
    ApiUpdateFirebasData,
    ApiGetCompany,
    ApiGetWhiteLabelSettings,
    ApiGetFeaturePermissions,
    ApiUserLogout,
    ApiGetNavigationOrder,
    ApiGetUserLevelPermissions
} from '../network/Services';
import CommonStyleSheet from '../utils/CommonStyleSheet';
import ApplicationDataManager from '../utils/ApplicationDataManager';
import { color } from 'react-native-reanimated';
var applicationDataManager = ApplicationDataManager.getInstance();
// import More from '../assets/svg/More.svg';
import Learning from '../assets/svg/Learning.svg'
import LearningFoot from '../assets/svg/LearningFoot.svg'
import Home from '../assets/svg/Home.svg'
import Profile from '../assets/svg/Profile.svg'
import Club from '../assets/svg/Club.svg'
import NewsFoot from '../assets/svg/NewsFoot.svg'
import Forms from '../assets/svg/Forms.svg';
import Help from '../assets/svg/Help.svg';
import ReportFraud from '../assets/svg/ReportFraud.svg';  //working
import BusinessDirectory from '../assets/svg/BusinessDirectory.svg'; //working
import FoodOrders from '../assets/svg/FoodOrders.svg'; //working
import UsefulLinks from '../assets/svg/UsefulLinks.svg';
import Messages from '../assets/svg/Messages.svg'  //working
import ContentLibrary from '../assets/svg/ContentLibrary.svg'  //working
import AppleLogo from '../assets/svg/AppleLogo.svg'
import MicrosoftLogo from '../assets/svg/MicrosoftLogo.svg'

export default class LoginView extends React.Component {
    constructor(props) {
        super(props)
        // this.dbRef = firebase.firestore().collection('users');
        this.authCredentialListener = null;
        this.user = null;
        this.state = {
            credentialStateForUser: -1,
            email: "",
            password: "",
            usersFirebaseData: [],
            homeLocationData: [],
            enable_flash_club: "",
            whitelabelsettings: [],
            create_account: applicationDataManager.getCreateAccount(),
            appname: applicationDataManager.getAppName(),
            applogo: applicationDataManager.getAppLogo(),
            action_button_background: applicationDataManager.getActionButtonBackground(),
            action_button_text_color: applicationDataManager.getActionButtonTextColor(),
            header_background_color: applicationDataManager.getHeaderBgcolor(),
            learningurl: ConstantValues.BASE_API_URL + 'azure/login?url=' + ConstantValues.URL_WEB + ',app',
            // learningurl: 'https://instaccess.co.za/instaccess_backend_dev/index.php/v2/azure/login?url=https://instaccess.co.za/dev/,app',
            invalidemail: "",
            invalidpassword: "",
            isPasswordTogle: true,
            isEmailActive: false,
            isPasswordActive: false,
            firepassword: "123456",
            keyboardHeight: 0,
            inputHeight: Platform.OS == 'ios' ? 40 : 0,
            firebaseChatUserData: [],
            userData: [],
            userAvailable: 0,
            firebaseChatUserData: [],
            navigationOrders: [],
            footerOptions: [],
            featureData: [],
            show_loyalty_cards: 0,
            isWebView: false
            // userData: data, 
        }
    }


    // onAppleButtonPress = () => {
    //     console.warn('Beginning Apple Authentication');

    //     return appleAuth.performRequest(
    //         {
    //             requestedOperation: appleAuth.Operation.LOGIN,
    //             requestedScopes: [
    //                 appleAuth.Scope.EMAIL,
    //                 appleAuth.Scope.FULL_NAME,
    //             ],
    //         },
    //     ).then(appleAuthRequestResponse => {
    //         let { identifyToken, email } = appleAuthRequestResponse;
    //         console.log("identifyToken" + identifyToken + "email" + email)

    //     })
    // }


    onAppleSignInProceess = async () => {
        console.warn('onAppleSignInProceess Apple Authentication 1');

        try {
            let response = {};
            let appleId = '';
            let appleToken = '';
            let appleEmail = '';
            console.warn('onAppleSignInProceess Apple Authentication 2');

            // const appleLoginResponse = await appleAuth.performRequest({
            //     requestedOperation:appleAuth.Operation.LOGIN,
            //     requestedScopes:[appleAuth.Scope.EMAIL,appleAuth.Scope.FULL_NAME]
            // });

            // appleAuth.onCredentialRevoked(async () => {
            //     console.warn('If this function executes, User Credentials have been Revoked');
            // });

            // console.log("isSupported",appleAuth.isSupported);
          
            const appleAuthRequestResponse = await appleAuth.performRequest({
                nonceEnabled: false,
                requestedOperation: appleAuth.Operation.LOGIN,
                requestedScopes: [appleAuth.Scope.EMAIL,
                appleAuth.Scope.FULL_NAME
                ],
            })
            // .then(resp=>{
            //     console.log("------------------appleAuthRequestResponse---------------1212" );
            //     alert('Apple reponse: '+JSON.stringify(resp));
            //     appleId = resp.user;
            //    appleEmail = resp.email;
           
            //  if(appleId!="" && appleId!=null && appleEmail!=null){
            //     this.onUserLogin(appleEmail," ",1);
                
            //    }
            //    else{
            
            //     setTimeout(() => {
            //         ValidateAlertPop("Email is not yet setup on Flash Life, please contact support@life.flash.co.za to provision your email address")
            
            //     }, 1500);
           
            // }
            // })
            .catch(error=>{
                console.log("Apple signin exception",error);
             
                setTimeout(() => {
                    ValidateAlertPop(error)
            
                }, 1500);
           
            });
            // console.log("------------------appleAuthRequestResponse---------------" +
            //     appleAuthRequestResponse);
            
            appleId = appleAuthRequestResponse.user;
            appleToken = appleAuthRequestResponse.identityToken;
            appleEmail = appleAuthRequestResponse.email;
            // console.log("appleId------------" + appleId + "appleToken-------------" + appleToken + "appleEmail-------" + appleEmail)
            const { email, email_verified, is_private_email, sub } = jwt_decode(appleAuthRequestResponse.identityToken)
alert("email"+email+"email_verified"+email_verified+"is_private_email"+is_private_email+"sub"+sub);
            if(appleId!="" &&appleId!=null && appleEmail!=null){
                this.onUserLogin(appleAuthRequestResponse.email," ",1);
                
               }
               else{
                //  ValidateAlertPop("Email is not yet setup on Flash Life, please contact support@life.flash.co.za to provision your email address")
            
                setTimeout(() => {
                    // ValidateAlertPop("Email is not yet setup on Flash Life, please contact support@life.flash.co.za to provision your email address")
            
                }, 1500);
           
            }
               
           
            }
        catch (e) {
            console.log("apple auth error" + e)
            // ValidateAlertPop(error);
            setTimeout(() => {
                // ValidateAlertPop(e);
            }, 1500);
       
           
        }

        // const appleAuthRequestResponse = await appleAuth.performRequest({
        //     requestedOperation: appleAuth.Operation.LOGOUT,
        //   });
        //     // get current authentication state for user
        //     // /!\ This method must be tested on a real device. On the iOS simulator it always throws an error.
        //     const credentialState = await appleAuth.getCredentialStateForUser(appleAuthRequestResponse.user);

        //     // use credentialState response to ensure the user is authenticated
        //     if (credentialState === appleAuth.State.AUTHORIZED) {
        //       // user is authenticated
        //       console.log("user is authenticated")
        //     }
        //     else{
        //   console.log("user is not authenticated")
        //   Alert.alert(
        //       '',
        //       "User is Not Authenticated",
        //       [
        //           {
        //               text: ConstantValues.OK_ALERT_STR, 
        //           }
        //       ],
        //       { cancelable: true },
        //   )
        //     }
    }

    onAppleButtonPress = async () => {
        console.warn('Beginning Apple Authentication');

        try {

            const appleAuthRequestResponse = await appleAuth.performRequest({
                requestedOperation: appleAuth.Operation.LOGIN,
                requestedScopes: [appleAuth.Scope.EMAIL, appleAuth.Scope.FULL_NAME],
            });
            // Success v1.0.0
            //  const appleAuthRequestResponse = await appleAuth.performRequest(
            //     {

            //       requestedOperation: AppleAuthRequestOperation.LOGIN,
            //       requestedScopes: [
            //         AppleAuthRequestScope.EMAIL,
            //         AppleAuthRequestScope.FULL_NAME,
            //       ],
            //     },
            //   )
            console.log("appleAuthRequestResponse" + appleAuthRequestResponse)
            // get current authentication state for user
            const credentialState = await appleAuth.getCredentialStateForUser(appleAuthRequestResponse.user);
            // use credentialState response to ensure the user is authenticated
            if (credentialState === AppleAuthCredentialState.AUTHORIZED) {
                // user is authenticated
            }
        } catch (e) {
            console.log("error" + e);
            // if (e.code === AppleAuthError.CANCELED) {
            //     // user cancelled Apple Sign-in
            //     console.log("user cancelled Apple Sign-in"+e)

            //   } else {
            //     // other unknown error
            //     console.log("other unknown error"+e)
            //   }


        }

        // get current authentication state for user
        // /!\ This method must be tested on a real device. On the iOS simulator it always throws an error.
        const credentialState = await appleAuth.getCredentialStateForUser(appleAuthRequestResponse.user);

        // use credentialState response to ensure the user is authenticated
        if (credentialState === appleAuth.State.AUTHORIZED) {
            // user is authenticated
            console.log("user is authenticated")
        }
        else {
            console.log("user is not authenticated")
            Alert.alert(
                '',
                "User is Not Authenticated",
                [
                    {
                        text: ConstantValues.OK_ALERT_STR,
                    }
                ],
                { cancelable: true },
            )
        }
    }

    fetchAndUpdateCredentialState = async () => {
        if (this.user === null) {
            this.setState({ credentialStateForUser: 'N/A' });
        } else {
            const credentialState = await appleAuth.getCredentialStateForUser(this.user);
            if (credentialState === appleAuth.State.AUTHORIZED) {
                this.setState({ credentialStateForUser: 'AUTHORIZED' });
            } else {
                this.setState({ credentialStateForUser: credentialState });
            }
        }
    }
    componentDidMount() {
        // this.authCredentialListener = appleAuth.onCredentialRevoked(async () => {
        //     console.warn('Credential Revoked');
        //     this.fetchAndUpdateCredentialState().catch(error =>
        //       this.setState({ credentialStateForUser: `Error: ${error.code}` }),
        //     );
        //   });

        //   this.fetchAndUpdateCredentialState()
        //     .then(res => this.setState({ credentialStateForUser: res }))
        //     .catch(error => this.setState({ credentialStateForUser: `Error: ${error.code}` }))

        // console.log("loginbackground---------------------------------" + this.state.loginbackground)
        this._unsubscribe = this.props.navigation.addListener('focus', () => {
            this.setState({
                email: "",
                password: "",
            })
        });
        if (Platform.OS === 'ios') {
            this.handleLocationPermission();
        } else {
            this.requestLocationPermission();
        }
        this.getWhiteLabelSettings("t", "l")
        AsyncStorage.getItem('email').then(value => {
            if (value) {
                this.setState({ email: value });
                AsyncStorage.getItem('password').then(pwd => {
                    if (pwd) {
                        this.setState({ password: pwd });
                        this.onUserLogin(this.state.email,this.state.password,"");
                    }
                });
            }
        });
        this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this._keyboardDidShow.bind(this));
        this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this._keyboardDidHide.bind(this));
    }
    handleLocationPermission = async () => {
        const res = await check(PERMISSIONS.IOS.LOCATION_ALWAYS);
        if (res === RESULTS.GRANTED) {
            // console.log("You can use the location");
            this.enableLocationService();
        } else if (res === RESULTS.DENIED) {
            const res2 = await request(PERMISSIONS.IOS.LOCATION_ALWAYS);
            res2 === RESULTS.GRANTED
                ? this.enableLocationService()
                : console.log("Location permission denied");
        }
    };
    _keyboardDidShow(e) {
        this.setState({ keyboardHeight: e.endCoordinates.height });
    }
    _keyboardDidHide(e) {
        this.setState({ keyboardHeight: 0 });
    }
    enableLocationService = () => {
        LocationSwitch.isLocationEnabled(
            () => {
                // console.log('Location is enabled');
                this.setState({ locationEnabled: true });
            },
            () => {
                LocationSwitch.enableLocationService(1000, true,
                    () => {
                        this.setState({ locationEnabled: true });
                    },
                    () => {
                        this.setState({ locationEnabled: false });
                    },
                );
                // console.log('Location is disabled');
            },
        );
    }
    requestLocationPermission = async () => {
        try {
            const chckLocationPermission = PermissionsAndroid.check(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION);
            if (chckLocationPermission === PermissionsAndroid.RESULTS.GRANTED) {
                this.enableLocationService();
            } else {
                const granted = await PermissionsAndroid.request(
                    PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION
                )
                if (granted === PermissionsAndroid.RESULTS.GRANTED) {
                    // console.log("You can use the location");
                    this.enableLocationService();
                } else {
                    // console.log("Location permission denied");
                }
            }
        } catch (err) {
            // console.warn(err)
        }
    }
    async onenableFlashClub(enableflash) {
        const { user_preferences_allow_email } = this.state;
        // console.log("enableflash*****" + enableflash)
        var more_code = function () {
        }
        await this.setState({
            enable_flash_club: enableflash
        }, () => console.log(this.state.enableflash),
        );
        more_code()
    }
    setWhiteLables = async (responseJson) => {
        ApplicationDataManager.getInstance().setAppLogo(responseJson[0].login_logo);
        ApplicationDataManager.getInstance().setActionButtonBackground(responseJson[0].action_button_background_color);
        ApplicationDataManager.getInstance().setFooterActiveTabcolor(responseJson[0].footer_background_color);
        ApplicationDataManager.getInstance().setToggleOfColor(responseJson[0].toggle_off_color);
        ApplicationDataManager.getInstance().setToggleOnColor(responseJson[0].toggle_on_color);
        ApplicationDataManager.getInstance().setTabActiveColor(responseJson[0].tab_background_color);
        ApplicationDataManager.getInstance().setHeaderTextColor(responseJson[0].header_text_color);
        ApplicationDataManager.getInstance().setActionButtonTextColor(responseJson[0].action_button_text_color);
        ApplicationDataManager.getInstance().setHeaderBgcolor(responseJson[0].header_background_color);
        await this.setState({
            whitelabelsettings: responseJson,
        })
        // console.log("this.state.whitelabelsettings---Login" + JSON.stringify(this.state.whitelabelsettings))
        // console.log("this.state.whitelabelsettings[0].action_button_background_color" + this.state.whitelabelsettings[0].action_button_background_color)
    }
    getWhiteLabelSettings = async (companyid, token) => {
        // console.log("getWhiteLabelSettings0------------------------------------login");
        let params = "?company_id=" + ConstantValues.COMPANY_ID_STR
        await ApiGetWhiteLabelSettings(
            params).then(responseJson => {
                // console.log("getWhiteLabelSettings" + JSON.stringify(responseJson))
                if (responseJson.length > 0) {
                    this.setWhiteLables(responseJson)
                }
            }).catch((err) => {
                this.setState({ isLoading: false })
            })
    }
    getLocationsList = async (navigationOrders, featureData, data, companyid, token, newData) => {
        // console.log("companyid" + companyid + "token" + token)
        // console.log("featuredata--footer-------------newData" + JSON.stringify(newData))
        let params = "?company_id=" + companyid;
        this.setState({ isLoading: true })
        await ApiGetCompany(token, params).then(responseJson => {
            this.setState({ isLoading: false })
            if (responseJson.length > 0) {
                this.setState({ isLoading: false })
                this.props.navigation.navigate('Main',
                    {
                        firebaseChatUserData: this.state.firebaseChatUserData,
                        navigationOrders: navigationOrders,
                        footerOptions: newData,
                        featureData: featureData,
                        userData: data,
                        enable_flash_club: responseJson[0].enable_flash_club,
                        show_loyalty_cards: responseJson[0].show_loyalty_cards
                    })
            }
            else {
                this.setState({ isLoading: false })
                this.props.navigation.navigate('Main', { firebaseChatUserData: this.state.firebaseChatUserData, navigationOrders: navigationOrders, footerOptions: newData, featureData: featureData, userData: data, enable_flash_club: this.state.enable_flash_club, show_loyalty_cards: 0 })
            }
            // console.log("this.state.enable_flash_club" + this.state.enable_flash_club)
        }).catch((err) => {
            this.setState({ isLoading: false })
        })
    }
    onFlashCompany = async (data, companyid, token, responseJson) => {
        let featuredata = [];
        let newData = Object.entries(responseJson[0])
        for (let i = 0; i < newData.length; i++) {
            if (newData[i][0].includes("app") && newData[i][1] == "1" && newData[i][0] != "app_dashboard_option1" && newData[i][0] != "app_rewards" && newData[i][0] != "app_reception_device_functions" && newData[i][0] != "app_reception_device_functions" && newData[i][0] != "app_reception_device_functions") {
                let tabname = ""
                let tabicon = null;
                let isVisible = false;
                let activetabcolor = "";
                let inactivetabcolor = "#A1A4B0";
                let activeicon = null;
                let inactiveicon = null;
                if (newData[i][0] == "app_locations") {
                    tabname = ConstantValues.SEARCH_NAME_STRING
                    tabicon = Constantimages.search_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    // isVisible = true;
                    isVisible = false;
                    activeicon = Learning;
                    inactiveicon = Learning;

                }
                else if (newData[i][0] == "app_checkin") {
                    tabname = ConstantValues.CHECKIN_STR
                    tabicon = Constantimages.search_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                    activeicon = Learning;
                    inactiveicon = Learning;
                }
                else if (newData[i][0] == "app_access_control" && data[0].user_type != 2 && data[0].user_type != 1) {
                    tabname = ConstantValues.ACCESS_STR
                    tabicon = Constantimages.accesscontrol_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                    activeicon = Learning;
                    inactiveicon = Learning;
                }

                else if (newData[i][0] == "app_club"
                    //  && this.state.enable_flash_club==1
                ) {
                    tabname = ConstantValues.CLUB_STR;
                    tabicon = Constantimages.new_flash_club_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                    activeicon = Club;
                    inactiveicon = Club;
                }
                else if (newData[i][0] == "app_profile") {
                    tabname = ConstantValues.PROFILE_STR
                    tabicon = Constantimages.flash_profile_sec_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                    activeicon = Profile;
                    inactiveicon = Profile;
                }
                else if (newData[i][0] == "app_forms") {
                    tabname = ConstantValues.FORMS_STR
                    tabicon = Constantimages.flash_survey_sec_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                    activeicon = Forms;
                    inactiveicon = Forms;
                }
                else if (newData[i][0] == "app_loyalty_card") {
                    tabname = ConstantValues.LOYALTYCARDS_STR
                    // tabname="Loyalty"
                    tabicon = Constantimages.loyalty_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                    activeicon = Learning;
                    inactiveicon = Learning;
                }
                else if (newData[i][0] == "app_support") {
                    tabname = ConstantValues.FLASH_SECTION_HELP_STR
                    tabicon = Constantimages.flash_support_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                    activeicon = Help;
                    inactiveicon = Help;
                }
                else if (newData[i][0] == "app_report_fraud") {
                    tabname = ConstantValues.REPORT_FRAUD_STR
                    tabicon = Constantimages.flash_fraud_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                    activeicon = ReportFraud;
                    inactiveicon = ReportFraud;
                }
                else if (newData[i][0] == "app_learning") {
                    // FlashBook
                    tabname = ConstantValues.LEARNING_AND_TRAINING_STR
                    tabicon = Constantimages.flash_learning_sec_icon,
                        activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                    activeicon = LearningFoot;
                    inactiveicon = LearningFoot;
                }
                else if (newData[i][0] == "app_bookings") {
                    tabname = ConstantValues.FOOD_SECTION_STR;
                    tabicon = Constantimages.flash_bookings_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                    activeicon = FoodOrders;
                    inactiveicon = FoodOrders;
                }
                else if (newData[i][0] == "app_web_links") {
                    tabname = ConstantValues.WEB_LINKS_STR
                    tabicon = Constantimages.flash_links_sec_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                    activeicon = UsefulLinks;
                    inactiveicon = UsefulLinks;
                }
                else if (newData[i][0] == "app_messages") {
                    tabname = ConstantValues.MESSAGES_STR
                    tabicon = Constantimages.flash_messages_sec_icon;
                    activetabcolor = "#0097F7";
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                    activeicon = Messages;
                    inactiveicon = Messages;
                }
                else if (newData[i][0] == "app_content_library") {
                    tabname = ConstantValues.CONTENT_LIBRARY_STR
                    tabicon = Constantimages.contentlibrary_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                    activeicon = ContentLibrary;
                    inactiveicon = ContentLibrary;
                }
                else if (newData[i][0] == "app_wellness_helpline") {
                    // Well-being
                    tabname = ConstantValues.FLASH_WELNESS_SEC_STR
                    tabicon = Constantimages.flash_club_icon;
                    activetabcolor = "#0097F7";
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                    activeicon = Learning;
                    inactiveicon = Learning;
                }
                else if (newData[i][0] == "app_business_directory") {
                    tabname = ConstantValues.FLASH_BUSINESS_DIRECTORY_SEC_STR
                    tabicon = Constantimages.flash_bussiness_sec_icon;
                    activetabcolor = "#0097F7";
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                    activeicon = BusinessDirectory;
                    inactiveicon = BusinessDirectory;
                }
                else if (newData[i][0] == "app_home") {
                    tabname = ConstantValues.HOME_STR
                    tabicon = Constantimages.flash_home_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                    activeicon = Home;
                    inactiveicon = Home;
                }
                else if (newData[i][0] == "app_news") {
                    tabname = ConstantValues.NEWS_STR
                    tabicon = Constantimages.news_splash_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                    activeicon = NewsFoot;
                    inactiveicon = NewsFoot;
                }
                if (newData[i][0] != "app_club") {
                    featuredata.push({
                        id: i,
                        enable: newData[i][1],
                        visible: isVisible,
                        permisiontype: newData[i][0],
                        tabname: tabname,
                        isSwitch: false,
                        tabicon: tabicon,
                        activetabcolor: activetabcolor,
                        inactivetabcolor: inactivetabcolor,
                        activeicon: activeicon,
                        inactiveicon: inactiveicon
                    })
                }
                if (newData[i][0] == "app_club" && data[0].club == "1") {
                    featuredata.push({
                        id: i,
                        enable: newData[i][1],
                        visible: isVisible,
                        permisiontype: newData[i][0],
                        tabname: tabname,
                        isSwitch: false,
                        tabicon: tabicon,
                        activetabcolor: activetabcolor,
                        inactivetabcolor: inactivetabcolor,
                        activeicon: activeicon,
                        inactiveicon: inactiveicon
                    })
                }
            }
            console.log("***********************************************--------------------------------------------------featuredata-----------1" + JSON.stringify(featuredata))
        }
        this.getNavigationOrder(responseJson, data, companyid, token, featuredata);
    }
    onInstaccessCompany = async (data, companyid, token, responseJson) => {
        // {ConstantValues.COMPANY_ID_STR=="54" ?
        let featuredata = [];
        let newData = Object.entries(responseJson[0])
        //   console.log("newData"+JSON.stringify(newData));
        //   console.log("data[0].user_type_id"+data[0].user_type_id+"data[0].user_type"+data[0].user_type+"this.state.enable_flash_club"+this.state.enable_flash_club)
        for (let i = 0; i < newData.length; i++) {
            if (newData[i][0].includes("app") && newData[i][1] == "1" && newData[i][0] != "app_dashboard_option1" && newData[i][0] != "app_rewards" && newData[i][0] != "app_reception_device_functions" && newData[i][0] != "app_reception_device_functions" && newData[i][0] != "app_reception_device_functions") {
                // if(newData[i][0].includes("app") && newData[i][1]=="1" && newData[i][0] != "app_dashboard_option1" && newData[i][0] != "app_rewards" && newData[i][0] != "app_bookings" ){
                // console.log("newData[i][0]"+newData[i][j])
                let tabname = ""
                let tabicon = null;
                let isVisible = false;
                let activetabcolor = "";
                let inactivetabcolor = "";
                if (newData[i][0] == "app_locations") {
                    tabname = ConstantValues.SEARCH_NAME_STRING
                    tabicon = Constantimages.search_icon,
                        activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = true;
                }
                else if (newData[i][0] == "app_checkin") {
                    tabname = ConstantValues.CHECKIN_STR
                    tabicon = Constantimages.search_icon,
                        activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                }
                else if (newData[i][0] == "app_access_control" && data[0].user_type != 2 && data[0].user_type != 1) {
                    tabname = ConstantValues.ACCESS_STR
                    tabicon = Constantimages.accesscontrol_icon,
                        activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                }
                else if (newData[i][0] == "app_club"
                    //  && this.state.enable_flash_club==1
                ) {
                    tabname = ConstantValues.CLUB_STR
                    tabicon = Constantimages.fastforword_icon,
                        activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                }
                else if (newData[i][0] == "app_profile") {
                    tabname = ConstantValues.PROFILE_STR
                    tabicon = Constantimages.profile_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                }
                else if (newData[i][0] == "app_forms") {
                    tabname = ConstantValues.FORMS_STR
                    tabicon = Constantimages.form_icon
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                }
                else if (newData[i][0] == "app_loyalty_card") {
                    tabname = ConstantValues.LOYALTYCARDS_STR
                    // tabname="Loyalty"
                    tabicon = Constantimages.loyalty_icon
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                }
                else if (newData[i][0] == "app_support") {
                    tabname = ConstantValues.FLASH_SECTION_HELP_STR
                    tabicon = Constantimages.contact_support_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                }
                else if (newData[i][0] == "app_report_fraud") {
                    tabname = ConstantValues.REPORT_FRAUD_STR
                    tabicon = Constantimages.report_fraud_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                }
                else if (newData[i][0] == "app_learning") {
                    tabname = ConstantValues.LEARNING_AND_TRAINING_STR
                    tabicon = Constantimages.learning_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                }
                else if (newData[i][0] == "app_bookings") {
                    tabname = ConstantValues.FOOD_SECTION_STR
                    tabicon = Constantimages.date_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                }
                else if (newData[i][0] == "app_web_links") {
                    tabname = ConstantValues.WEB_LINKS_STR
                    tabicon = Constantimages.weblink_icon;
                    activetabcolor = colors.COLOR_BLACK;
                    inactivetabcolor = "#A1A4B0";
                    isVisible = false;
                }
                if (newData[i][0] != "app_club" && newData[i][0] != "app_bookings") {
                    featuredata.push({
                        id: i,
                        enable: newData[i][1],
                        visible: isVisible,
                        permisiontype: newData[i][0],
                        tabname: tabname,
                        isSwitch: false,
                        tabicon: tabicon,
                        activetabcolor: activetabcolor,
                        inactivetabcolor: inactivetabcolor
                    })
                }
                if (newData[i][0] == "app_club" && data[0].club == "1") {
                    featuredata.push({
                        id: i,
                        enable: newData[i][1],
                        visible: isVisible,
                        permisiontype: newData[i][0],
                        tabname: tabname,
                        isSwitch: false,
                        tabicon: tabicon,
                        activetabcolor: activetabcolor,
                        inactivetabcolor: inactivetabcolor
                    })
                }
                if (newData[i][0] == "app_bookings" && data[0].lunch_orders == "1") {
                    featuredata.push({
                        id: i,
                        enable: newData[i][1],
                        visible: isVisible,
                        permisiontype: newData[i][0],
                        tabname: tabname,
                        isSwitch: false,
                        tabicon: tabicon,
                        activetabcolor: activetabcolor,
                        inactivetabcolor: inactivetabcolor
                    })
                }
            }
            // console.log("featuredata-----------1" + JSON.stringify(featuredata))
        }
        this.getNavigationOrder(responseJson, data, companyid, token, featuredata);
    }
    getUserLevelFeaturePermission = async (data, companyid, token) => {
        // console.log("companyid" + companyid + "token" + token)
        let usercompanyid = companyid;
        if (data[0].user_type_id == 1) {
            usercompanyid = 0;
        }
        //  company_id=54&user_type_id=5&user_id=223"
        let params = "?company_id=" + usercompanyid + "&user_type_id=" + data[0].user_type_id + "&user_id=" + data[0].id + "&apply_user_level=1";
        await ApiGetUserLevelPermissions(token, params).then(responseJson => {
            console.log("==================userlevlgetFeaturePermissions" + JSON.stringify(responseJson))
            if (responseJson.length > 0) {
                if (ConstantValues.COMPANY_ID_STR == "54") {
                    this.onFlashCompany(data, companyid, token, responseJson)
                }
                else {
                    this.onInstaccessCompany(data, companyid, token, responseJson)
                }
            }
            else {
                this.getFeaturePermissions(data, companyid, token)
                //  Alert.alert(
                //      '',
                //      ConstantValues.NO_PERMISSIONS_ALLOWED_STR,
                //      [
                //          {
                //              text: ConstantValues.OK_ALERT_STR, onPress: this.onLogout.bind(this, token)
                //          }
                //      ],
                //      { cancelable: true },
                //  )
            }
            // console.log("this.state.enable_flash_club" + this.state.enable_flash_club)
        }).catch((err) => {
            this.setState({ isLoading: false })
        })
    }
    getFeaturePermissions = async (data, companyid, token) => {
        // console.log("companyid" + companyid + "token" + token)
        let usercompanyid = companyid;
        if (data[0].user_type_id == 1) {
            usercompanyid = 0;
        }
        let params = "?company_id=" + usercompanyid + "&user_type_id=" + data[0].user_type_id;
        await ApiGetFeaturePermissions(token, params).then(responseJson => {
            console.log("getFeaturePermissions" + JSON.stringify(responseJson))
            if (responseJson.length > 0) {
                if (ConstantValues.COMPANY_ID_STR == "54") {
                    this.onFlashCompany(data, companyid, token, responseJson)
                }
                else {
                    this.onInstaccessCompany(data, companyid, token, responseJson)
                }
            }
            else {
                Alert.alert(
                    '',
                    ConstantValues.NO_PERMISSIONS_ALLOWED_STR,
                    [
                        {
                            text: ConstantValues.OK_ALERT_STR, onPress: this.onLogout.bind(this, token)
                        }
                    ],
                    { cancelable: true },
                )
            }
            // console.log("this.state.enable_flash_club" + this.state.enable_flash_club)
        }).catch((err) => {
            this.setState({ isLoading: false })
        })
    }
    getNavigationOrder = async (featureData, data, companyid, token, featurefooterdata) => {
        let usercompanyid = companyid;
        if (data[0].user_type_id == 1) {
            usercompanyid = 0;
        }
        let navigationOrders = [];
        let params = "?company_id=" + usercompanyid;
        await ApiGetNavigationOrder(token, params).then(responseJson => {
            console.log("--------------------------------getNavigationOrderList response" + JSON.stringify(responseJson))
            if (responseJson.length > 0) {
                // this.setState({navigationOrders:responseJson})
                navigationOrders = responseJson;
            }
            // console.log()    
            this.getLocationsList(navigationOrders, featureData, data, companyid, token, featurefooterdata)
            // console.log("this.state.enable_flash_club" + this.state.enable_flash_club)
        }).catch((err) => {
            this.setState({ isLoading: false })
        })
    }
    onLogout = (token) => {
        this.setState({
            isLoading: true,
        })
        ApiUserLogout(token).then(responseJson => {
            //   console.log("Logout response" + responseJson);
            this.setState({ isLoading: false })
            this.resetActions()
        }).catch((err) => {
            this.setState({ isLoading: false })
            this.resetActions();
        })
    }
    resetActions = () => {
        AsyncStorage.removeItem('email', err => {
        });
        AsyncStorage.removeItem('password', err => {
        });
        AsyncStorage.removeItem('userToken', err => {
        });
    }
    getFirebaseData = (token) => {
        // console.log("token -------------getFirebaseData()" + token)
        // this.setState({ isLoading: true });
        let params = "";
        ApiGetUserDetails(token, params).then(response => {
            console.log("ApiGetUserDetails 2 check" + JSON.stringify(response))
            // this.setState({ isLoading: false });
            let data = [];
            if (response.length > 0) {
                for (let i = 0; i < response.length; i++) {
                    data.push({
                        // id: response[i].id,
                        name: response[i].name,
                        lastname: response[i].surname,
                        user_email: response[i].user_email,
                        cell_number: response[i].cell_number,
                        id_number: response[i].id_number,
                        token: token,
                        user_type: response[i].user_type,
                        street_address: response[i].street_address,
                        city: response[i].city_name,
                        misdn_number: response[i].MSISDN,
                        club: response[i].club,
                        preferred_name: response[i].preferred_name,
                        job_title: response[i].job_title,
                        // preferred_name:response[0].preferred_name,
                        // job_title:response[0].job_title,
                        department_name: response[i].department_name,
                        location_name: response[i].location_name,
                        company_name: response[i].company_name,
                    })
                }
                this.setState({
                    usersFirebaseData: data,
                    //  isLoading: false
                });
                // console.log("login: users getFirebaseData is: " + JSON.stringify(this.state.usersFirebaseData[0]));
            }
        }).catch(error => {
            this.setState({ isLoading: false });
            // console.log(error);
        })
    }
    getCurrentUserDataFromFirebase(varEmail,) {
        var data = [];
        data = this.state.usersFirebaseData;
        for (var i = 0; i < data.length; i++) {
            if (data[i].user_email === varEmail) {
                return true;
            }
        }
        return false;
    }
    UNSAFE_componentWillMount() {
        BackHandler.addEventListener('hardwareBackPress', this.handleBackButtonClick);
    }
    componentWillUnmount() {
        // this.authCredentialListener();
        BackHandler.removeEventListener('hardwareBackPress', this.handleBackButtonClick);
        this._unsubscribe();
        this.keyboardDidShowListener.remove();
        this.keyboardDidHideListener.remove();
    }
    handleBackButtonClick() {
        Alert.alert(
            '',
            ConstantValues.CONFIRM_CLOSE_APP_ALERT_STR,
            [
                {
                    text: ConstantValues.CANCEL_STR_S, onPress: () => console.log('Cancel Button Pressed'), style: 'cancel'
                },
                {
                    text: ConstantValues.OK_ALERT_STR, onPress: () => BackHandler.exitApp(),
                }
            ],
            { cancelable: false },
        )
        return true;
    }
    handleEmailChange = (newText) => this.setState({ email: newText })
    handlePasswordChange = (newText) => this.setState({ password: newText })
    async onLocationSet() {
        await this.setState({
            isUserLogin: false
        }),
            AsyncStorage.setItem('isuserlogin', JSON.stringify(this.state.isUserLogin)),
            this.props.navigation.navigate('Location');
    }
    validateFields = () => {
        const { email, password } = this.state;
        let reg = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
        let validstate = false;
        if (email == "") {
            validstate = false;
            this.setState({ invalidemail: "Incorrect Email Address" })
            // ValidateAlertPop(ConstantValues.ENTER_EMAIL_ADDRESS_ALERT)
        }
        if (password == "") {
            validstate = false
            this.setState({ invalidpassword: "Incorrect Password. Please try again" })
            // ValidateAlertPop(ConstantValues.ENTER_PASSWORD_ALERT)
        }
        // else if (password.length < 5) {
        //     validstate = false    
        //     ValidateAlertPop( ConstantValues.PASSWORD_LENGTH_ALERT)
        // }
        if (reg.test(email) === false) {
            validstate = false;
            this.setState({ invalidemail: "Incorrect Email Address" })
            // ValidateAlertPop( ConstantValues.ENTER_VALID_EMAIL_ADDRESS_ALERT)
        }
        else {
            validstate = true;
        }
        return validstate;
    }
    submitAndClear = (employee_company_id, token) => {
        // this.textEmailAddress.clear();
        // this.textPassword.clear();
        this.setState({
            // email: '',
            // password: '',
            isLoading: false
        })
    }
    onForgotPassword() {
        this.props.navigation.navigate('Forgot');
    }
    onUpdateUser = async (home_location_id, id, token, fcmToken) => {
        console.log("onUpdateUser")
        let devicetype = "ios"
        this.setState({ isLoading: true })
        ApiUpdateFirebasData(token, id, fcmToken, devicetype, home_location_id
        ).then(response => {
            // this.setState({ isLoading: false })
            let data = [];
            console.log("onUpdateUser  response" + JSON.stringify(response))
            if (response.length > 0) {
                data.push({
                    id: response[0].id,
                    name: response[0].name,
                    lastname: response[0].surname,
                    user_email: response[0].user_email,
                    cell_number: response[0].cell_number,
                    id_number: response[0].id_number,
                    token: token,
                    user_type: response[0].user_type,
                    street_address: response[0].street_address,
                    city: response[0].city_name,
                    city_name: response[0].city_name,
                    province: response[0].province_name,
                    country: response[0].country_name,
                    city_id: response[0].city_id,
                    province_id: response[0].province_id,
                    country_id: response[0].country_id,
                    pincode: response[0].pincode,
                    digital_signature: response[0].digital_signature,
                    user_image: response[0].user_image,
                    employee_company_id: response[0].employee_company_id,
                    employed_location_id: response[0].employed_location_id,
                    home_location_id: response[0].home_location_id,
                    division_id: response[0].division_id,
                    department_id: response[0].department_id,
                    access_control_notification: response[0].access_control_notification,
                    user_preferences_allow_email: response[0].preferences_allow_email,
                    user_preferences_allow_id: response[0].preferences_allow_id,
                    user_preferences_allow_selfie: response[0].preferences_allow_selfie,
                    user_preferences_allow_address: response[0].preferences_allow_address,
                    access_token: response[0].device_token,
                    user_type_id: response[0].user_type_id,
                    misdn_number: response[0].MSISDN,
                    club: response[0].club,
                    lunch_orders: response[0].lunch_orders,
                    preferred_name: response[0].preferred_name,
                    job_title: response[0].job_title,
                    department_name: response[0].department_name,
                    location_name: response[0].location_name,
                    company_name: response[0].company_name,
                })
            }
            if (data.length > 0) {
                if (response[0].user_type == ConstantValues.USER_TYPE_ADMIN_DEVICE_STR) {
                    this.submitAndClear(response[0].employee_company_id, token);
                    this.props.navigation.navigate('ReceptionLogin', { userData: data })
                }
                else if (response[0].user_type == ConstantValues.USER_TYPE_GATE_DEVICE_STR) {
                    this.submitAndClear(response[0].employee_company_id, token);
                    this.props.navigation.navigate('GateEntry', { userData: data })
                }
                else {
                    // this.getWhiteLabelSettings(data[0].employee_company_id, token);
                    // this.getFeaturePermissions(data, data[0].employee_company_id, token)
                    this.getUserLevelFeaturePermission(data, data[0].employee_company_id, token);
                    //   f12
                }
            }
        }).catch(error => {
            this.setState({ isLoading: false });
            // console.log(error);
        })
    }
    onOpenMicrosoftLink = () => {
        this.setState({ isWebView: true })
    }
    getLoggedUserDetail(token, userid) {
        let params = "?id=" + userid;
        // console.log("token, params" + token + "params" + params);
        ApiGetUserDetails(token, params).then(response => {
            console.log("user details response--------------------------------: " + JSON.stringify(response));
            // this.setState({ isLoading: false });
            let data = [];
            // console.log("data details 0 -------------------------------: " + JSON.stringify(data));
            data.push({
                id: userid,
                name: response[0].name,
                lastname: response[0].surname,
                user_email: response[0].user_email,
                cell_number: response[0].cell_number,
                id_number: response[0].id_number,
                token: token,
                user_type: response[0].user_type,
                street_address: response[0].street_address,
                city: response[0].city_name,
                city_name: response[0].city_name,
                province: response[0].province_name,
                country: response[0].country_name,
                city_id: response[0].city_id,
                province_id: response[0].province_id,
                country_id: response[0].country_id,
                pincode: response[0].pincode,
                digital_signature: response[0].digital_signature,
                user_image: response[0].user_image,
                employee_company_id: response[0].employee_company_id,
                employed_location_id: response[0].employed_location_id,
                home_location_id: response[0].home_location_id,
                division_id: response[0].division_id,
                department_id: response[0].department_id,
                access_control_notification: response[0].access_control_notification,
                user_preferences_allow_email: response[0].preferences_allow_email,
                user_preferences_allow_id: response[0].preferences_allow_id,
                user_preferences_allow_selfie: response[0].preferences_allow_selfie,
                user_preferences_allow_address: response[0].preferences_allow_address,
                access_token: response[0].device_token,
                user_type_id: response[0].user_type_id,
                misdn_number: response[0].MSISDN,
                club: response[0].club,
                lunch_orders: response[0].lunch_orders,
                preferred_name: response[0].preferred_name,
                job_title: response[0].job_title,
                department_name: response[0].department_name,
                location_name: response[0].location_name,
                company_name: response[0].company_name,
            })
            AsyncStorage.setItem('email', this.state.email)
            AsyncStorage.setItem('password', this.state.password)
            this.getFirebaseData(token);
            if (!this.getCurrentUserDataFromFirebase(data[0].user_email)) {
                this.storeDataToFirebase(data[0].home_location_id, data[0].id, token);
            }
            else {
                if (data.length > 0) {
                    this.submitAndClear(data[0].employee_company_id, token);
                    if (data[0].user_type == ConstantValues.USER_TYPE_ADMIN_DEVICE_STR) {
                        this.props.navigation.navigate('ReceptionLogin', { userData: data })
                    }
                    else if (data[0].user_type == ConstantValues.USER_TYPE_GATE_DEVICE_STR) {
                        this.props.navigation.navigate('GateEntry', { userData: data })
                    }
                    else {
                        this.getUserLevelFeaturePermission(data, data[0].employee_company_id, token);
                    }
                }
            }
        }).catch(error => {
            this.setState({ isLoading: false });
            // console.log(error);
        })
    }
    onUserLogin(emailid,pass,type) {
        const { email, password } = this.state;
        this.setState({ invalidpassword: "", invalidemail: "" })
        // if(typeoflogin=="microsoft"){
            if(type==""){
       
        if (!this.validateFields()) {
            return;
        }
    }
        // this.storeUser();
        this.setState({ isLoading: true, })
        let token = "";
        let userid = "";
        ApiUserLogin(
            emailid, pass,type).then(responseJson => {
                // console.log("responseJson" + JSON.stringify(responseJson))
                if (responseJson.status === 'success') {
                    token = responseJson.data.Authorization_Token;
                    userid = responseJson.data.id;
                    this.getLoggedUserDetail(token, userid);
                }
                else {
                    this.setState({ isLoading: false, })
                    if (responseJson.message == "Incorrect password") {
                        if(type==""){
                      
                        this.setState({ invalidpassword: "Incorrect Password. Please try again" })
                        }
                        else{
                            // ValidateAlertPop("Email is not yet setup on Flash Life, please contact support@life.flash.co.za to provision your email address")
                
                            setTimeout(() => {
                                ValidateAlertPop("Email is not yet setup on Flash Life, please contact support@life.flash.co.za to provision your email address")
            
                            }, 1500);
                       
                        }
                    }
                    else {
                        if(type==""){
                            this.setState({ invalidemail: "Incorrect Email Address" })                          
                        }
                        else{

                            setTimeout(() => {
                                ValidateAlertPop("Email is not yet setup on Flash Life, please contact support@life.flash.co.za to provision your email address")
                            }, 1500);
                       
                            // ValidateAlertPop("Email is not yet setup on Flash Life, please contact support@life.flash.co.za to provision your email address")
              
                        }
                        }
                }
            }).catch(error => {
                this.setState({ isLoading: false, })
                setTimeout(() => {
                    Alert.alert(
                        '',
                        emailid+""+error,
                        [
                            {
                                text: ConstantValues.OK_ALERT_STR, 
                            }
                        ],
                        { cancelable: true },
                    )
                }, 1500);
           
            })
    }
    async checkPermission(home_location_id, userid, token) {
        const enabled = await firebase.messaging().hasPermission();
        console.log("value()enabled" + enabled)
        if (enabled) {
            this.getToken(home_location_id, userid, token);
        } else {
            this.requestPermission(home_location_id, userid, token);
        }
    }
    async getToken(home_location_id, userid, token) {
        let fcmToken = "";
        await AsyncStorage.getItem('fcmToken').then(value => {
            if (value) {
                console.log("value()storeDataToFirebase" + value)
                fcmToken = value;
            }
        });
        if (!fcmToken) {
            fcmToken = await firebase.messaging().getToken();
            if (fcmToken) {
                await AsyncStorage.setItem('fcmToken', fcmToken);
            }
        }
        console.log("fcmToken" + fcmToken + "------" + home_location_id + "----" + userid + "----" + token + "")
        await this.onUpdateUser(home_location_id, userid, token, fcmToken)
    }
    async requestPermission(home_location_id, userid, token) {
        try {
            await firebase.messaging().requestPermission();
            this.getToken(home_location_id, userid, token);
        } catch (error) {
            // console.log('permission rejected');
        }
    }
    storeDataToFirebase = async (home_location_id, userid, token) => {
        // console.log("storeDataToFirebase:---------------------home_location_id-" + home_location_id + "   " + userid + "");
        const { user, userName, userType, registeredUser } = this.state;
        this.checkPermission(home_location_id, userid, token);
    }
    renderLoading = () => {
        if (this.state.isLoading) {
            return (
                <View style={CommonStyleSheet.loading}>
                    <ActivityIndicator size='large' color={colors.COLOR_BG} />
                </View>
            )
        }
    }
    renderProgressDialogLoader() {
        if (this.state.isLoading) {
            return (
                <ProgressDialog
                    background={colors.COLOR_WHITE}
                    visible={this.state.isLoading}
                    title={ConstantValues.LOADING_STR}
                />
            )
        }
    }
    _onLoad(webViewState) {
        console.log("_onLoad" + JSON.stringify(webViewState))
        var regexp = /[?&]([^=#]+)=([^&#]*)/g, params = {}, check;
        while (check = regexp.exec(webViewState.url)) {
            params[check[1]] = check[2];
        }
        console.log("params", params)
        if (Object.keys(params).length != 0) {
            let token = params.Authorization_Token;
            let userid = params.id;
            if (params.Authorization_Token) {
                this.getLoggedUserDetail(token, userid)
            }
        }
    }

    appleSignIn = (result) => {
        console.log('Resssult', result);
    };


    renderRowWebView() {
        return <View style={{ flex: 1 }}>
            <WebView
                onError={() =>
                    this.setState({ loaderror: "connection failed please try again!" })
                }
                onNavigationStateChange={this._onLoad.bind(this)}
                // onLoadStart={() => this.setState({ isLoading: true })}
                // onLoadEnd={() => this.setState({ isLoading: false })}
                // onLoad={() => this.setState({ isLoading: false })}
                scalesPageToFit={false}
                style={{ height: dimensionsProps.fullHeight, resizeMode: 'cover', flex: 1 }}
                injectedJavaScript={`const meta = document.createElement('meta'); meta.setAttribute('content', 'width=width, initial-scale=0.5, maximum-scale=0.5, user-scalable=2.0'); meta.setAttribute('name', 'viewport'); document.getElementsByTagName('head')[0].appendChild(meta); `}
                source={{ uri: this.state.learningurl }}
            />
            {/* {this.renderProgressDialogLoader()} */}
        </View>
    }
    render() {
        if (this.state.isWebView) {
            return this.renderRowWebView()
        }
        else {
            return (
                <SafeAreaView style={{
                    flex: 1,
                    alignItems: 'center',
                    justifyContent: 'center',
                    backgroundColor:
                        this.state.header_background_color != "" ?
                            this.state.header_background_color : colors.COLOR_THEME,
                }}>
                    <StatusBar
                        barStyle='dark-content'
                        backgroundColor={colors.COLOR_DARK_BLUE} />
                    <ScrollView
                        showsVerticalScrollIndicator={false}
                        keyboardShouldPersistTaps="always"
                        contentContainerStyle={{
                            flexGrow: 1,

                            // flex: 1,
                            alignItems: 'center', justifyContent: 'center',
                        }}
                    //      style={{
                    //         flex: 1,
                    //          alignItems: 'center', justifyContent: 'center',
                    //    }}
                    >
                        <View style={{
                            flex: 1,
                            alignItems: 'center', justifyContent: 'center',
                        }}>
                            <View style={{
                                width: 296,
                                marginBottom: Platform.OS === 'ios' ?
                                    this.state.keyboardHeight + this.state.inputHeight
                                    : null
                            }}>
                                {this.state.applogo != "" &&
                                    <Image style={{
                                        width: 130,
                                        height: 50,
                                        resizeMode: 'contain',
                                    }}
                                        source={
                                            Constantimages.flash_login_head_logo
                                        }
                                    />
                                }
                                <Text style={{
                                    fontSize: 28, width: 296, fontWeight: '700',
                                    color: colors.COLOR_WHITE
                                }}>
                                    Welcome to{'\n'}
                                    Flash Life</Text>
                                <View style={{
                                    justifyContent: 'center', alignSelf: 'center',
                                    paddingTop: 35
                                }}>
                                    <TextInput
                                        ref={input => { this.textEmailAddress = input }}
                                        mode="outlined"
                                        style={{
                                            width: 296,
                                            height: 57,
                                            padding: 0,
                                            margin: 0,
                                            borderWidth: 0,
                                            borderRadius: 8,
                                            backgroundColor: this.state.header_background_color != "" ?
                                                this.state.header_background_color : colors.COLOR_THEME,
                                        }}
                                        label={ConstantValues.EMAIL_STR_S}
                                        value={this.state.email}
                                        onChangeText={this.handleEmailChange}
                                        onFocus={() => this.setState({ isEmailActive: true, })}
                                        onBlur={() => this.setState({ isEmailActive: false, })}
                                        theme={
                                            // this.state.invalidemail != "" ?
                                            // {
                                            //     colors: { text: '#000000', primary: this.state.header_background_color,
                                            //      underlineColor: 'transparent',
                                            //      }
                                            // }
                                            // :
                                            {
                                                colors: {
                                                    text: '#000000', primary: colors.COLOR_WHITE,
                                                    underlineColor: 'transparent',
                                                }
                                            }
                                        }
                                    />
                                    <Text style={{
                                        color: this.state.invalidemail ? "#FD012C" : colors
                                            .COLOR_BLACK
                                    }}>{this.state.invalidemail}</Text>
                                </View>
                                <View style={{
                                    justifyContent: 'center',
                                    alignSelf: 'center',
                                }}>
                                    <TextInput
                                        ref={input => { this.textPassword = input }}
                                        mode="outlined"
                                        style={{
                                            width: 296,
                                            height: 57,
                                            padding: 0,
                                            margin: 0,
                                            borderWidth: 0,
                                            borderRadius: 8,
                                            backgroundColor: this.state.header_background_color != "" ?
                                                this.state.header_background_color : colors.COLOR_THEME,
                                        }}
                                        onFocus={() => this.setState({ isPasswordActive: true, })}
                                        onBlur={() => this.setState({ isPasswordActive: false, })}
                                        label={ConstantValues.PASSWORD_STR_S}
                                        value={this.state.password}
                                        secureTextEntry={this.state.isPasswordTogle}
                                        onChangeText={this.handlePasswordChange}
                                        theme={
                                            // this.state.invalidpassword != "" ?
                                            // {
                                            //     colors: { text: '#000000', primary: this.state.header_background_color, underlineColor: 'transparent', }
                                            // }
                                            // :
                                            {
                                                colors: { text: '#000000', primary: colors.COLOR_WHITE, underlineColor: 'transparent', }
                                            }
                                        }
                                        right={
                                            <TextInput.Icon
                                                name={this.state.isPasswordTogle ? 'eye-off' : 'eye'}
                                                onPress={() => {
                                                    this.setState({ isPasswordTogle: !this.state.isPasswordTogle })
                                                }}
                                            ></TextInput.Icon>
                                        }
                                    />
                                    <Text style={{
                                        color: this.state.invalidpassword ? "#FD012C" : null
                                    }}>{this.state.invalidpassword}</Text>
                                </View>
                                <TouchableOpacity
                                onPress={() => this.onUserLogin(this.state.email,this.state.password,"")}
                                style={{
                                        flexDirection: 'row',
                                        justifyContent: 'center',
                                        alignItems: 'center',
                                        backgroundColor: this.state.action_button_background != "" ? this.state.action_button_background : colors.COLOR_THEME,
                                        borderRadius: 5,
                                        elevation: 5,
                                        // margin: 10,
                                        width: 296,
                                        alignSelf: 'center',
                                        height: 57,
                                        // paddingVertical: 24 / PixelRatio.get(),
                                        // marginTop: 48 / PixelRatio.get()
                                    }}>
                                    <View style={{ flex: 1 }}>
                                    </View>
                                    <View style={{ flex: 2 }}>
                                        <Text
                                            style={{
                                                fontSize: 16,
                                                color: this.state.action_button_text_color != "" ?
                                                    this.state.action_button_text_color : colors.COLOR_WHITE,
                                                textAlign: 'center',
                                                paddingHorizontal: 25,
                                                // paddingVertical: 15
                                            }}>
                                            {ConstantValues.LOGIN_STR}
                                        </Text>
                                    </View>
                                    <View style={{ flex: 1, alignItems: 'flex-end', marginRight: 10 }}>
                                        <Image
                                            source={Constantimages.arrow_right_login}
                                            style={{
                                                height: 14, width: 14,
                                                resizeMode: 'contain',
                                                tintColor: ConstantValues.COMPANY_ID_STR == "37" ? colors.COLOR_WHITE : "#B2FA00"
                                            }}
                                        />
                                    </View>
                                </TouchableOpacity>
                                {/* <TouchableOpacity
                                   onPress={() => this.onOpenMicrosoftLink()}
                                   style={{
                                       flexDirection: 'row',
                                       justifyContent: 'center',
                                       alignItems: 'center',
                                       backgroundColor: this.state.action_button_background != "" ? this.state.action_button_background : colors.COLOR_THEME,
                                       borderRadius: 5,
                                       elevation: 5,

                                       width: 296,
                                       height: 57,
                                       alignSelf: 'center',

                                       paddingVertical: 24 / PixelRatio.get(),
                                       marginTop: 48 / PixelRatio.get()
                                   }}>
                                   <View style={{ flex: 0.5 }}>
                                   </View>
                                   <View style={{ flex: 2 }}>
                                       <Text
                                           style={{
                                               fontSize: 16,
                                               color: this.state.action_button_text_color != "" ?
                                                   this.state.action_button_text_color : colors.COLOR_WHITE,
                                               textAlign: 'center',
                                           }}>
                                           SIGN IN with Microsoft
                                       </Text>
                                   </View>
                                   <View style={{
                                       flex: 0.5,
                                       alignItems: 'flex-end', marginRight: 10
                                   }}>
                                       <Image
                                           source={Constantimages.arrow_right_login}
                                           style={{
                                               height: 14, width: 14,
                                               resizeMode: 'contain',
                                               tintColor: ConstantValues.COMPANY_ID_STR == "37" ? colors.COLOR_WHITE : "#B2FA00"
                                           }}
                                       />
                                   </View>
                               </TouchableOpacity> */}
                                {/* 
                               <TouchableOpacity
                                     onPress={() => this.onOpenMicrosoftLink()}
                                   style={{
                                       flexDirection: 'row',
                                       justifyContent: 'center',
                                       alignItems: 'center',
                                       backgroundColor: this.state.action_button_background != "" ? this.state.action_button_background : colors.COLOR_THEME,
                                       borderRadius: 5,
                                       elevation: 5,

                                       width: 296,
                                       height: 57,
                                       alignSelf: 'center',

                                       paddingVertical: 24 / PixelRatio.get(),
                                       marginTop: 48 / PixelRatio.get()
                                   }}>
                                       <View style={{ flex: 0.5 }}>
                                     </View>
                                       
                                   <View style={{ flex: 2 ,flexDirection:'row',alignItems:'center'}}>
                                   <Image
                                           source={Constantimages.microsoft}
                                           style={{
                                               height: 23, width: 23,
                                               resizeMode: 'contain',
                                               }}
                                       />
                                     
                                       <Text
                                           style={{
                                               fontSize: 16,
                                               color: this.state.action_button_text_color != "" ?
                                                   this.state.action_button_text_color : colors.COLOR_WHITE,
                                               textAlign: 'center',
                                           }}>
                                          SIGN IN with Microsoft
                                      </Text>
                                   </View>
                                   
                               </TouchableOpacity> */}
                                {/* <View style = {{ flexDirection: 'row',
                                       justifyContent: 'center',
                                       alignItems: 'center',
                                       backgroundColor: this.state.action_button_background != "" ? this.state.action_button_background : colors.COLOR_THEME,
                                       borderRadius: 5,
                                       elevation: 5,

                                       width: 296,
                                       height: 57,
                                       alignSelf: 'center',

                                       paddingVertical: 24 / PixelRatio.get(),
                                       marginTop: 48 / PixelRatio.get()}}>
    {SignInWithAppleButton({
         buttonStyle: styles.appleBtn, 
         callBack: this.appleSignIn,
         buttonText: "Sign Up With Apple",
       })}
   </View> */}
                                {/* <TouchableOpacity
                                    onPress={this.onAppleSignInProceess}
                                    style={{
                                        flexDirection: 'row',
                                        justifyContent: 'space-between',
                                        alignItems: 'center',
                                        backgroundColor: this.state.action_button_background != "" ? this.state.action_button_background : colors.COLOR_THEME,
                                        borderRadius: 5,
                                        elevation: 5,

                                        width: 296,
                                        height: 57,
                                        alignSelf: 'center',

                                        paddingVertical: 24 / PixelRatio.get(),
                                        marginTop: 48 / PixelRatio.get()
                                    }}>
                                    
                                                                      <View style={{ flex: 1}}>
                                                                      <Image
                                            source={Constantimages.apple}
                                            style={{
                                                height: 23, width: 23,
                                                resizeMode: 'contain',
                                                marginLeft:20
                                            }}
                                        />

                                    </View>

                            
                                        <Text
                                            style={{
                                                fontSize: 16,
                                                color: this.state.action_button_text_color != "" ?
                                                    this.state.action_button_text_color : colors.COLOR_WHITE,
                                                textAlign: 'center',
                                            }}>
                                            SIGN IN with Apple
                                        </Text>
                                        <View style={{ flex: 1}}>
                                    </View>

                             
                                </TouchableOpacity> */}
                                {/* <View>
     <AppleButton
       buttonStyle={AppleButton.Style.WHITE}
       buttonType={AppleButton.Type.SIGN_IN}
       style={{
           flexDirection: 'row',
           justifyContent: 'center',
           alignItems: 'center',
           backgroundColor: this.state.action_button_background != "" ? this.state.action_button_background : colors.COLOR_THEME,
           borderRadius: 5,
           elevation: 5,

           width: 296,
           height: 57,
           alignSelf: 'center',

           paddingVertical: 24 / PixelRatio.get(),
           marginTop: 48 / PixelRatio.get()
       }}
       onPress={() => this.onAppleButtonPress()}
     />
   </View> */}
                                <TouchableOpacity
                                    onPress={() => this.onForgotPassword()}
                                >
                                    <Text
                                        style={{
                                            fontSize: 16,
                                            color: colors.COLOR_BLACK,
                                            textAlign: 'center',
                                            paddingVertical: 35,
                                            // textDecorationLine: 'underline',
                                        }}>
                                        {ConstantValues.FORGOT_PASSWORD_STR}?
                                    </Text>
                                </TouchableOpacity>
                                {this.state.create_account == "1" &&
                                    <View style={{
                                        flexDirection: 'row',
                                        justifyContent: 'center',
                                        alignItems: 'center',
                                        marginHorizontal: paddingProps.md,
                                        paddingHorizontal: 10,
                                        // paddingTop: 35
                                    }}
                                    >
                                        <Text style={{ paddingHorizontal: 5, color: colors.GREY_COLOR, }}>
                                            {ConstantValues.ALREADY_HAVE_AN_ACCOUNT_STR}
                                        </Text>
                                        <TouchableOpacity
                                            onPress={() => this.props.navigation.navigate('Register')}
                                            style={{ paddingVertical: 10, }}
                                        >
                                            <Text style={{
                                                paddingHorizontal: 5,
                                                color: this.state.action_button_background != "" ?
                                                    this.state.action_button_background :
                                                    colors.COLOR_THEME,
                                                fontSize: fontsProps.md, fontWeight: 'bold'
                                            }}>
                                                {ConstantValues.CREATE_ACCOUNT_STR_SMALL}
                                            </Text>
                                        </TouchableOpacity>
                                    </View>
                                }
                            </View>

                        </View>
                    </ScrollView>
                    {/* {this.renderProgressDialogLoader()} */}
                    <InternetStatusConnection />
                </SafeAreaView>
            );
        }
    }
};
const styles = StyleSheet.create({
    ImageStyle: {
        padding: 10,
        margin: 5,
        height: 20,
        width: 20,
        resizeMode: 'stretch',
        alignItems: 'center',
        tintColor: colors.GREY_COLOR
    },
})